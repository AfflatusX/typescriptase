import { createHash, Hash } from "crypto";

import { IRenderable, ITraceable, IWritable } from "./internal";

const header: string = `/**
 * This file was generated by typescriptace.
 * SOURCE<<@0>>
 * SIGNED<<@1>>
 */`;

export interface IModule extends ITraceable {
  content: IRenderable[];
}

export class Module implements IWritable {

  public static new(props: IModule): IWritable {
    return new Module(props);
  }

  private static getHash(content: string): string {
    const hash: Hash = createHash("SHA512");
    hash.update(content);

    return hash.digest("base64");
  }

  private constructor(
    private readonly props: IModule,
  ) { }

  public print(): string {
    let builder: string = "\n";
    this.props.content
      .forEach(
        (currentValue: IRenderable, index: number): void => {
          builder += currentValue.render();
          builder += "\n";
        },
      );
    const fmtHeader: string = header
      .replace("@0", this.props.trace)
      .replace("@1", Module.getHash(builder));

    return fmtHeader + builder;
  }
}
